-> build your first flask app lesson  
   -> how to build a flask hello world app  

-> introduction to flask hello world app  
   -> after completing the previous steps for setting up flask, it's time to create your very first flask application  
   -> this lesson will guide you step by step through the process of building a simple flask hello world app, which will serve as the foundation for all your future flask web development projects  
   -> by the end of this lesson, you will understand key flask concepts such as routing, handling requests, and running a flask application in development mode  

-> flask hello world app setup  
   -> open your text editor or ide (e.g., vs code) and navigate to your project directory  
      -> in vs code, you can do this by selecting `file -> open folder` and choosing your `flask-webdev` folder  
      -> ensure your virtual environment is activated before proceeding  
   -> if the terminal window in vs code isn't already in the correct directory, navigate to it using the `cd` command  
      -> for example:  
         -> `cd ~/documents/codingnomads/projects/flask-webdev`  
   -> once you're in the right folder and the virtual environment is activated, create a new python file for your flask app  
      -> name this file `hello.py`  

-> write the code  
   -> in your `hello.py` file, type the following code blocks in sequence to set up your first flask app  

-> initialisation  
   -> first, import the flask class from the `flask` module, which will allow you to create a flask application instance  
      -> the flask object needs the name of the main module or package, which can be passed as `__name__`. this helps flask locate the associated templates and static files in the app directory  
   -> here's the code to initialise the flask app:  
      ```python  
      from flask import flask  
      app = flask(__name__)  
      ```  
      -> the `flask(__name__)` line creates an instance of the flask class, which will be used to define routes, handle requests, and configure the app  

-> routing  
   -> next, you will define a route. routes in flask map urls to functions, allowing you to specify what happens when a user visits a particular url in their browser  
   -> in this example, we will set up the root url (`/`) of the web app, which will trigger the function `index()` when visited  
   -> here's how to add routing using a flask decorator:  
      ```python  
      @app.route('/')  
      def index():  
          return "hello web world!"  
      ```  
   -> the `@app.route('/')` decorator tells flask to call the `index()` function whenever the root url is accessed  
   -> this function will simply return the string `"hello web world!"` when the page is visited  

-> what about `app.run()`?  
   -> at this point, your flask application is ready, but you're probably wondering how to run it as a web app  
   -> in flask, the `app.run()` function is typically used to start the web server and run the application  
   -> however, flask provides a more convenient way to run the app using the command line interface (cli) instead of calling `app.run()` directly in the python file  

-> set the flask app environment variable  
   -> before running the flask application, you need to set an environment variable so flask knows which file contains the application instance  
   -> you can do this by running the following command in your terminal:  
      ```bash  
      export flask_app=hello.py  
      ```  
   -> this command tells flask that the `hello.py` file contains the app to run  
   -> without setting the `flask_app` variable, flask won't know which python file to execute  

-> run your flask hello world app  
   -> with the environment variable set, you can now run the flask app by executing the following command in your terminal:  
      ```bash  
      flask run  
      ```  
   -> this will start the flask development server, and you should see output like this:  
      ```bash  
      * serving flask app "hello.py"  
      * running on http://127.0.0.1:5000/ (press ctrl+c to quit)  
      ```  
   -> open a web browser and visit `http://127.0.0.1:5000/`, and you should see the message `"hello web world!"` displayed on the page  

-> run flask for development mode  
   -> by default, flask runs in "production" mode, which is not suitable for development as it doesn't provide features like automatic reloading of code or detailed error messages  
   -> to run flask in development mode, set the `flask_env` environment variable by running the following command:  
      ```bash  
      export flask_env=development  
      ```  
   -> this will enable development mode and allow flask to reload the server automatically whenever you make changes to your code  

-> enable debug mode  
   -> debug mode is a valuable feature that helps during development by providing detailed error messages and automatically restarting the flask server when you modify your code  
   -> to enable debug mode, you need to set the `flask_debug` environment variable:  
      ```bash  
      export flask_debug=1  
      ```  
   -> once enabled, flask will automatically reload the application when you make changes to your source files  
   -> it will also display errors in the browser, allowing you to inspect the issue and fix it quickly  

-> summary: how to build a flask hello world app  
   -> you've now built a basic flask hello world app that demonstrates how to initialise a flask application, define routes, and run the app in development mode  
   -> the next steps in flask development will involve adding more functionality, such as working with forms, templates, and databases  
   -> keep in mind the importance of environment variables like `flask_app`, `flask_env`, and `flask_debug` for configuring your flask app and running it in the appropriate environment  
   -> in the next lesson, you will learn about urls and routing in more detail, which will allow you to create more complex and dynamic web applications  
